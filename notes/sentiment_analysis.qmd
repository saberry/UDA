---
title: "Sentiment Analysis"
format:
  html:
    toc: true
    toc-location: left
    self-contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```


Sentiment analysis is commonly used when we want to know the general *feelings* of what someone has written or said. Sentiment analysis is commonly seen applied to Twitter and other social media posts, but we can use it anywhere where people have written/said something (product reviews, song lyrics, final statements).

Sentiment can take many different forms: positive/negative affect, emotional states, and even financial contexts.

Let's take a peak at some simple sentiment analysis.

## Simple Sentiment

Let's consider the following statements:


```{r}
library(dplyr)
library(tidytext)
library(magrittr)

statement <- "I dislike code, but I really love money."

tokens <- tibble(text = statement) %>% 
  unnest_tokens(tbl = ., output = word, input = text)

tokens
```

Now, we can compare the tokens within our statement to some pre-defined dictionary of positive and negative words.

```{r}
library(tidyr)

tokens %>%
  inner_join(get_sentiments("bing")) %>% 
  count(sentiment) %>% 
  spread(sentiment, n, fill = 0) %>% 
  mutate(sentiment = positive - negative)
```

When we use Bing's dictionary, we see that we get one positive word (love) and negative word (dislike) with a neutral overall sentiment (a sentiment of 0 would indicate neutrality, while anything above 0 has an increasing amount of positivity and anything below 0 has an increasing amount of negativity).

Do you think that dislike and love are of the same magnitude? If I had to make a wild guess, I might say that love is stronger than dislike. Let's switch out our sentiment library to get something with a little better notion of polarity.

```{r}
# You will need to install the 'textdata' package!

tokens %>%
  inner_join(get_sentiments("afinn"))
```

Now this looks a bit more interesting! "Love" has a stronger positive polarity than "dislike" has negative polarity. So, we could guess that we would have some positive sentiment.

If we divide the sum of our word sentiments by the number of words within the dictionary, we should get an idea of our sentence's overall sentiment.

```{r}
tokens %>%
  inner_join(get_sentiments("afinn")) %>% 
  summarize(n = nrow(.), sentSum = sum(value)) %>% 
  mutate(sentiment = sentSum / n)
```

Our sentiment of .5 tells us that our sentence is positive, even if only slightly so.

While these simple sentiment analyses provide some decent measures to the sentiment of our text, we are ignoring big chunks of our text by just counting keywords.

For example, it is probably fair to say that "really love" is stronger than just "love". We might want to switch over to some techniques that consider *n*-grams and other text features to calculate sentiment.

## Smarter Sentiment Analysis

Words, by themselves, certainly have meaning. When we write or speak, though, we use language for more effectively if we craft statements that are more than just a collection of words. While word-level sentiment analysis can be a good starting point, it misses a lot of context. What happens when we use the word "really"? What about "not"? Even the humble "however" can change the sentiment of a sentence. 

For this reason, we need a sentence-level understanding of sentiment. 

Computationally, we have the following:

$$C=c'_i,j,l/√(w_i,jn)$$

Where:

$$c'_{i,j}=∑{((1 + w_{amp} + w_{deamp})\cdot w_{i,j,k}^{p}(-1)^{2 + w_{neg}})}$$

$$w_{amp}= (w_{b} > 1) + ∑{(w_{neg}\cdot (z \cdot w_{i,j,k}^{a}))}$$

$$w_{deamp} = \max(w_{deamp'}, -1)$$

$$w_{deamp'}= (w_{b} < 1) + ∑{(z(- w_{neg}\cdot w_{i,j,k}^{a} + w_{i,j,k}^{d}))}$$

$$w_{b} = 1 + z_2 * w_{b'}$$

$$w_{b'} = ∑{\\(|w_{adversative\,conjunction}|, ..., w_{i, j, k}^{p}, w_{i, j, k}^{p}, ..., |w_{adversative\,conjunction}| * -1}\\)$$

$$w_{neg}= ≤ft(∑{w_{i,j,k}^{n}})$$  

While all the formulas can be helpful, let's break down the steps a little more.

1. Split paragraphs into individual sentences and each sentence becomes a bag of words.

2. From that bag of words, extract out sets of words that match terms within a sentiment lexicon. These are called *polar clusters*.

3. Assign a general polarity score to those polar clusters: 1 for positive and -1 for negative.

4. Find the 4 words before each polar cluster word and 2 words after each polar cluster word. These words, called the *context cluster*, are evaluated to be neutral, *amplifiers*, or *deamplifiers*. Amplifiers *intensify* a polarity score, whereas deamplifiers *downtone* a polarity score. These words are also searched for *negators* -- words that will flip the polarity of a word.

5. Search for *adversative conjunctions* -- but, however, and although. Whatever comes before the adversative gets deamplified and whatever comes after the adversative gets amplified.

Is this an absolutely perfect metric? Of course not! It does, however, provide a better score than word-level sentiment without the complexity (and high data cost) of more advanced methods.

We will use the *jockers* sentiment library, but many more are available. Depending on your exact needs, there are some dictionaries designed for different applications. 

Before we engage in our whole sentiment analysis, let's take a look at a few things.

Here is the dictionary that *jockers* will use.

```{r}
lexicon::hash_sentiment_jockers
```

You might want to use View() to get a complete look at what is happening in there.

We should also take a peak at our valence shifters:

```{r}
lexicon::hash_valence_shifters
```

With all of that out of the way, let's get down to the matter at hand:

```{r}
library(sentimentr)

library(lexicon)

library(magrittr)

statement <- "I hate code, but I really love money."

sent_score <- sentiment(tolower(statement), 
                        polarity_dt = lexicon::hash_sentiment_jockers_rinker)
sent_score
```

We can see that we get a much stronger sentiment score when we include more information within the sentence. While the first part of our sentence starts out with a negative word (dislike has a sentiment value of -1), we have an adversarial "but" that will downweight whatever is in the initial phrase and then we will have the amplified (from "really", with a default weight of .8) sentiment of "love" (with a weight of .75 in our dictionary).

With all of this together, we get a much better idea about the sentiment of our text.

There are also some handy functions within `sentimentr`:

```{r}
extractedTerms <- extract_sentiment_terms(
  statement, 
  polarity_dt = lexicon::hash_sentiment_jockers_rinker
)

extractedTerms$positive
extractedTerms$negative

attributes(extractedTerms)$counts

attributes(extractedTerms)$elements
```

## Model-based Sentiment

```{python}
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import pandas as pd
import pyarrow

# You will only need to do this once:

# Only run the following once:
# nltk.download('vader_lexicon')

# lyrics_pd = pd.read_feather('D:/projects/UDA/data/all_lyrics.feather')

lyrics_pd = pd.read_feather('C:/Users/sberry5/Documents/teaching/UDA/data/all_lyrics.feather')

lyrics_pd['lyrics'] = (
  lyrics_pd.lyrics.str.replace('(\\[.*?\\])', '') 
  .str.replace('([a-z])([A-Z])', '\\1 \\2') 
)

lyrics_pd['lyrics'] = lyrics_pd['lyrics'].astype(str)

sid = SentimentIntensityAnalyzer()

lyrics_pd['scores'] = lyrics_pd['lyrics'].apply(
  lambda lyrics: sid.polarity_scores(lyrics))
  
lyrics_pd['scores'].iloc[0]
  
lyrics_pd[['neg', 'neu', 'pos', 'compound']] = pd.DataFrame(
  lyrics_pd.scores.tolist(), index = lyrics_pd.index
  )

lyrics_pd.to_csv('C:/Users/sberry5/Documents/teaching/UDA/data/vader_sentiment.csv')
```

You might also have an easy time using TextBlob. Honestly, TextBlob has all of the nltk functionality, but with far less hassle. It is, however, very slow!

```{python}
import textblob

textblob.TextBlob('dogs are animals').sentiment
textblob.TextBlob('Dogs make great pets').sentiment.polarity
textblob.TextBlob('Dogs are filthy animals, but I really do love them.').sentiment

# The following code absolutely works, but will take several minutes to run:

# lyrics_pd['blob_polarity'] = lyrics_pd['lyrics'].apply(
#   lambda lyrics: textblob.TextBlob(lyrics).sentiment.polarity
```

What do you think *subjectivity* means?

You can also use an NB approach from `textblox`:

```{python}
from textblob.sentiments import NaiveBayesAnalyzer
# nltk.download('punkt')
# nltk.download('movie_reviews')
textblob.TextBlob("Dogs are filthy animals, but I really do love them.", analyzer=NaiveBayesAnalyzer()).sentiment
```

And if you want to hang out with the cool kids, use spaCy:

```{python}
import spacy

from spacytextblob.spacytextblob import SpacyTextBlob

# Run the following in your terminal:
# python -m spacy download en_core_web_sm

nlp = spacy.load('en_core_web_sm')
nlp.add_pipe('spacytextblob')
text = 'i know we werent perfect, but I never felt this way for no one'
doc = nlp(text)

doc._.polarity
```


## Transformers

```{python}
from bs4 import BeautifulSoup
import pandas as pd
import requests
from transformers import pipeline
import torch

# The HuggingFace folks are just making stuff too easy at this point: 
# https://huggingface.co/docs/transformers/main_classes/pipelines

sentiment_analysis = pipeline('sentiment-analysis')

test_text = 'I dislike code, but I really love money.'

result = sentiment_analysis(test_text)

print("Label:", result[0]['label'])

print("Confidence Score:", result[0]['score'])

links = [
  'https://genius.com/James-mcmurtry-we-cant-make-it-here-anymore-lyrics', 
  'https://genius.com/Olivia-rodrigo-drivers-license-lyrics'
  ]

def scrape_clean(link):
  
  song_request = requests.get(link)

  song_content = BeautifulSoup(song_request.content, 'html.parser') 

  song_lyrics = song_content.select('#lyrics-root')

  song_list = []

  for i in range(len(song_lyrics)):
      song_list.append(song_lyrics[i].getText())

  song_pd = pd.DataFrame([song_list], columns = ['lyrics'])

  song_pd['lyrics'] = (
    song_pd.lyrics.str.replace('(\\[.*?\\])', '') 
    .str.replace('([a-z])([A-Z])', '\\1 \\2') 
  )
  
  return song_pd

song_lyrics = pd.DataFrame()

for links in links:
  song_lyrics = song_lyrics.append(scrape_clean(links))
  
song_lyrics['lyrics'] = song_lyrics['lyrics'].str.slice(0,511)  

def sentiment_results(lyrics):
  sent_result = sentiment_analysis(lyrics)
  label = sent_result[0]['label']
  score = sent_result[0]['score']
  return [label, score]


sentiment_results(song_lyrics['lyrics'].iloc[0])

```


## Differences

### Dictionary

```{r}
review <- "Sure these shoes are pricey, but you get what you pay for.
I worked 60 hours a week all year long and I finally was able
to purchas these shoes. I put them on and you could immediately
tell these weren't your average $60 sneakers. They may have the
same amount of form, comfort, shape, and performance, but they
are WAY more stylish. Like $3000 stylish. Sometimes my daughter
complains, though. She'll say things like, 'Are we going to eat
tonight' and 'I'm tired of sleeping in the street', but then I 
just show her my awesome Nikes and she shuts her mouth. Great
shoes, do recommend!!"

library(sentimentr)
library(magrittr)
review_score <- sentiment(review)
mean(review_score$sentiment)
```

```{python}
review = '''
Sure these shoes are pricey, but you get what you pay for.
I worked 60 hours a week all year long and I finally was able
to purchas these shoes. I put them on and you could immediately
tell these weren't your average $60 sneakers. They may have the
same amount of form, comfort, shape, and performance, but they
are WAY more stylish. Like $3000 stylish. Sometimes my daughter
complains, though. She'll say things like, 'Are we going to eat
tonight' and 'I'm tired of sleeping in the street', but then I 
just show her my awesome Nikes and she shuts her mouth. Great
shoes, do recommend!!
'''

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sid = SentimentIntensityAnalyzer()

sid.polarity_scores(review)
# Compound ranges from -1 to 1.
```


### Model

```{python}
import spacy

from spacytextblob.spacytextblob import SpacyTextBlob

# Run the following in your terminal:
# python -m spacy download en_core_web_sm

nlp = spacy.load('en_core_web_sm')
nlp.add_pipe('spacytextblob')
doc = nlp(review)

doc._.polarity
```


### Transformer

```{python}
from transformers import pipeline
import torch

sentiment_analysis = pipeline('sentiment-analysis')

result = sentiment_analysis(review)

print("Label:", result[0]['label'])

print("Confidence Score:", result[0]['score'])

```

```{python}
bad_review = '''
4 stars are you kidding me? Are they from friends and relatives?Hungry for Thai food takeout, this was the closest one to our hotel. We were in Indiana for my sons baseball tournament. Entering the place you could tell it was run down. Leaned on the service desk and it was all sticky. Gross!!! No one in the place dining should have told me this place was not good. The way to tell a good Thai food by their pad Thai and this was the worsed pad thai We have ever tasted. Not one thing was right about this dish. We thought we tasted the worsed Thai food before but this place definitely hands down is the winner. To top it off I found a piece of hair in my fried rice. This was typical of a place that doesn't care what they serve. The fried rice was nothing but white rice soak with soy sauce and wala! , fried rice!! I'm so mad at myself for believing the 4 star review!!!! Stay away from this place unless you like throwing your money away. It's a total dump! I'm not kidding.
'''

sid.polarity_scores(bad_review)

doc = nlp(bad_review)
doc._.polarity

result = sentiment_analysis(bad_review)
result

```



## Other Text Fun

Sentiment analysis is always a handy tool to have around. You might also want to explore other descriptive aspects of your text.

The `koRpus` package allows for all types of interesting types descriptives. There are a great number of readability and lexical diversity statistics (Fucks is likely my favorite).